{
    "version": 3,
    "sources": [
        "..\\..\\..\\src\\home\\controller\\explorer.js"
    ],
    "names": [
        "indexAction",
        "assign",
        "path",
        "process",
        "cwd",
        "replace",
        "display",
        "openAction",
        "self",
        "socket",
        "http",
        "broadcast",
        "launcherAction",
        "exec",
        "cmd",
        "data",
        "think",
        "isEmpty",
        "console",
        "log",
        "stbui",
        "stdout",
        "setEncoding",
        "on",
        "emit",
        "stderr",
        "closeAction",
        "mkfileAction",
        "get",
        "decodeURIComponent",
        "isFile",
        "writeFileSync",
        "json",
        "mkdirAction",
        "isDir",
        "mkdir",
        "pathrnameAction",
        "post",
        "rname",
        "success",
        "pathdeleteAction",
        "delFile",
        "JSON",
        "parse",
        "file",
        "type",
        "rmdir",
        "then",
        "unlinkSync",
        "filedownloadAction",
        "name",
        "split",
        "pop",
        "download",
        "historybackAction",
        "pathinfoAction",
        "pathcopyAction",
        "zipDdownloadAction",
        "zipAction",
        "searchAction",
        "treelistAction",
        "children",
        "dir",
        "files",
        "readdirSync",
        "forEach",
        "filename",
        "fullname",
        "join",
        "stats",
        "statSync",
        "isDirectory",
        "push",
        "atime",
        "ctime",
        "mtime",
        "mode",
        "is_readable",
        "is_writeable",
        "pathlistAction",
        "getAllFiles",
        "folderlist",
        "fielList",
        "k",
        "v",
        "ext",
        "size_friendly",
        "size",
        "map",
        "stat",
        "getTime",
        "filter",
        "start",
        "indexOf",
        "end",
        "length",
        "substring",
        "getFileContent",
        "buffer",
        "readFileSync"
    ],
    "mappings": "AAAA;;;;;;;;;;;;;;;;AAEA;;;;AACA;;;;AACA;;;;AACA;;;;;;;;;;;;;;qBAIIA,W,0BAAc;AACV,aAAKC,MAAL,CAAY;AACRC,kBAAKC,QAAQC,GAAR,GAAcC,OAAd,CAAsB,KAAtB,EAA4B,GAA5B,IAAiC;AAD9B,SAAZ;;AAIA,eAAO,KAAKC,OAAL,EAAP;AACH,K;;qBAEDC,U,uBAAWC,I,EAAM;AACb,YAAMC,SAASD,KAAKE,IAAL,CAAUD,MAAzB;AACA,aAAKE,SAAL,CAAe,aAAf,EAA8B,WAA9B;AACH,K;;qBAEDC,c,2BAAeJ,I,EAAM;AAAA;;AACjB,YAAMK,OAAO,wBAAcA,IAA3B;AADiB,YAEVC,GAFU,GAEHN,KAAKE,IAAL,CAAUK,IAFP,CAEVD,GAFU;;;AAIjB,YAAGE,MAAMC,OAAN,CAAcH,GAAd,CAAH,EAAuB;AACnB;AACH;AACDI,gBAAQC,GAAR,CAAYL,GAAZ;;AAEA,YAAMM,QAAQP,KAAKC,GAAL,CAAd;AACAM,cAAMC,MAAN,CAAaC,WAAb,CAAyB,OAAzB;AACAF,cAAMC,MAAN,CAAaE,EAAb,CAAgB,MAAhB,EAAwB,UAACR,IAAD,EAAU;AAC9B,mBAAKS,IAAL,CAAU,UAAV,EAAsBT,IAAtB;AACH,SAFD;;AAIAK,cAAMK,MAAN,CAAaH,WAAb,CAAyB,OAAzB;AACAF,cAAMK,MAAN,CAAaF,EAAb,CAAgB,MAAhB,EAAwB,UAACR,IAAD,EAAU;AAC9B,mBAAKS,IAAL,CAAU,UAAV,EAAsBT,IAAtB;AACH,SAFD;;AAIAK,cAAMG,EAAN,CAAS,OAAT,EAAkB,YAAM;AACpB;AACA;AACH,SAHD;AAKH,K;;qBAEDG,W,wBAAYlB,I,EAAM;AACd,aAAKG,SAAL,CAAe,aAAf,EAA8B,cAA9B;AACH,K;;AAED;;;qBACAgB,Y,2BAAe;AACX,YAAIzB,OAAO,KAAK0B,GAAL,CAAS,MAAT,CAAX;AACA1B,eAAO2B,mBAAmB3B,IAAnB,CAAP;;AAEA,YAAI,CAACc,MAAMc,MAAN,CAAa5B,IAAb,CAAL,EAAyB;AACrB,yBAAG6B,aAAH,CAAiB7B,IAAjB,EAAuB,EAAvB;AACH;;AAED,aAAK8B,IAAL,CAAU,EAAC,QAAQ,IAAT,EAAe,YAAY,CAA3B,EAA8B,QAAQ,OAAtC,EAAV;AACH,K;;AAED;;;qBACAC,W,0BAAc;AACV,YAAI/B,OAAO,KAAK0B,GAAL,CAAS,MAAT,CAAX;AACA1B,eAAO2B,mBAAmB3B,IAAnB,CAAP;;AAEA,YAAI,CAACc,MAAMkB,KAAN,CAAYhC,IAAZ,CAAL,EAAwB;AACpBc,kBAAMmB,KAAN,CAAYjC,IAAZ;AACH;;AAED,aAAK8B,IAAL,CAAU,EAAC,QAAQ,IAAT,EAAe,YAAY,CAA3B,EAA8B,QAAQ,OAAtC,EAAV;AACH,K;;qBAEDI,e,8BAAkB;AACd,YAAIlC,OAAO,KAAKmC,IAAL,CAAU,MAAV,CAAX;AACA,YAAIC,QAAQ,KAAKD,IAAL,CAAU,UAAV,CAAZ;;AAEA;AACA;;AAEA,aAAKE,OAAL;AACH,K;;AAGD;;;;;qBAGAC,gB,+BAAmB;AAAA;;AACf,YAAIC,UAAU,KAAKJ,IAAL,CAAU,MAAV,CAAd;AACAI,kBAAUC,KAAKC,KAAL,CAAWF,OAAX,CAAV;;AAEA,YAAIG,OAAOH,QAAQ,CAAR,EAAWvC,IAAtB;AACA0C,eAAOf,mBAAmBe,IAAnB,CAAP;;AAEA,YAAIH,QAAQ,CAAR,EAAWI,IAAX,IAAmB,QAAvB,EAAiC;AAC7B7B,kBAAM8B,KAAN,CAAYF,IAAZ,EAAkBG,IAAlB,CAAuB,YAAM;AACzB,uBAAKR,OAAL,CAAa,EAAb,EAAiB,SAAjB;AACH,aAFD;;AAIA;AACH,SAND,MAMO,IAAIE,QAAQ,CAAR,EAAWI,IAAX,IAAmB,MAAvB,EAA+B;;AAElC,yBAAGG,UAAH,CAAcJ,IAAd;AACH;;AAED,aAAKZ,IAAL,CAAU,EAAC,QAAQ,IAAT,EAAe,YAAY,CAA3B,EAA8B,QAAQ,MAAtC,EAAV;AACH,K;;qBAEDiB,kB,iCAAqB;AACjB,YAAIL,OAAO,KAAKhB,GAAL,CAAS,MAAT,CAAX;AACAgB,eAAOf,mBAAmBe,IAAnB,CAAP;;AAEA,YAAIM,OAAON,KAAKO,KAAL,CAAW,GAAX,EAAgBC,GAAhB,EAAX;;AAEA,aAAKC,QAAL,CAAcT,IAAd,EAAoBM,IAApB;;AAEA,aAAKX,OAAL,CAAa;AACTW,kBAAMA,IADG;AAEThD,kBAAM0C;AAFG,SAAb;AAIH,K;;qBAEDU,iB,gCAAoB;AAChB,aAAKf,OAAL;AACH,K;;qBAEDgB,c,6BAAiB;AACb,aAAKhB,OAAL;AACH,K;;qBAEDiB,c,6BAAiB;AACb,aAAKjB,OAAL;AACH,K;;qBAEDkB,kB,iCAAqB;AACjB,aAAKlB,OAAL;AACH,K;;qBAEDmB,S,wBAAY;AACR,aAAKnB,OAAL;AACH,K;;qBAEDoB,Y,2BAAe;AACX,aAAKpB,OAAL;AACH,K;;qBAEDqB,c,6BAAiB;AACb,YAAIC,WAAW,EAAf;AACA,YAAIC,MAAM3D,QAAQC,GAAR,EAAV;AACA,YAAI2D,QAAQ,aAAGC,WAAH,CAAeF,GAAf,CAAZ;;AAEAC,cAAME,OAAN,CAAc,UAAUC,QAAV,EAAoB;AAC9B,gBAAIC,WAAW,eAAKC,IAAL,CAAUN,GAAV,EAAeI,QAAf,CAAf;AACA,gBAAIG,QAAQ,aAAGC,QAAH,CAAYH,QAAZ,CAAZ;;AAEA,gBAAIE,MAAME,WAAN,EAAJ,EAAyB;;AAErBV,yBAASW,IAAT,CAAc;AACVtB,0BAAMgB,QADI;AAEVrB,0BAAM,QAFI;AAGV4B,2BAAO,CAACJ,MAAMI,KAHJ;AAIVC,2BAAO,CAACL,MAAMK,KAJJ;AAKVC,2BAAO,CAACN,MAAMM,KALJ;AAMVzE,0BAAMC,QAAQC,GAAR,KAAgB,IANZ;AAOVwE,0BAAM,sBAPI;AAQVC,iCAAa,CARH;AASVC,kCAAc;AATJ,iBAAd;AAYH;;AAED;AACA;AACA;AACA;AAEH,SAzBD;;AA4BA,YAAI/D,OAAO;AACP,oBAAQ,IADD;AAEP,wBAAY,CAFL;AAGP,oBAAQ,CAAC;AACL,wBAAQ,KADH;AAEL,4BAAY,KAFP;AAGL,4BAAY,iBAHP;AAIL,wBAAQ,IAJH;AAKL,4BAAY;AALP,aAAD,EAML;AACC,wBAAQ,MADT;AAEC,4BAAY8C,QAFb;AAGC,4BAAY,cAHb;AAIC,4BAAY,IAJb;AAKC,wBAAQ,IALT;AAMC,6BAAa1D,QAAQC,GAAR,EANd;AAOC,4BAAY;AAPb,aANK,EAcL;AACC,wBAAQ,MADT;AAEC,4BAAY,EAFb;AAGC,4BAAY,cAHb;AAIC,4BAAY,KAJb;AAKC,wBAAQ,IALT;AAMC,6BAAa,UANd;AAOC;AACA,4BAAY;AARb,aAdK;AAHD,SAAX;;AA+BA,aAAK4B,IAAL,CAAUjB,IAAV;AACH,K;;qBAEDgE,c,6BAAiB;AACb,YAAI7E,OAAO,KAAK0B,GAAL,CAAS,MAAT,CAAX;AACA1B,eAAO2B,mBAAmBA,mBAAmBA,mBAAmB3B,IAAnB,CAAnB,CAAnB,CAAP;;AAEA,YAAI6D,QAAQ,KAAKiB,WAAL,CAAiB9E,IAAjB,CAAZ;;AAEA,YAAI+E,aAAa,EAAjB;AAAA,YACIC,WAAW,EADf;;AAGAnB,cAAME,OAAN,CAAc,UAAUkB,CAAV,EAAaC,CAAb,EAAgB;;AAE1B,gBAAIrE,OAAO,EAAX;;AAEAA,iBAAKmC,IAAL,GAAYiC,EAAEjC,IAAd;AACAnC,iBAAK8B,IAAL,GAAYsC,EAAEtC,IAAd;AACA9B,iBAAK0D,KAAL,GAAaU,EAAEV,KAAf;AACA1D,iBAAK2D,KAAL,GAAaS,EAAET,KAAf;AACA3D,iBAAK4D,KAAL,GAAaQ,EAAER,KAAf;AACA5D,iBAAKb,IAAL,GAAYA,IAAZ;AACAa,iBAAK6D,IAAL,GAAY,sBAAZ;AACA7D,iBAAK8D,WAAL,GAAmB,CAAnB;AACA9D,iBAAK+D,YAAL,GAAoB,CAApB;;AAEA,gBAAIK,EAAEtC,IAAF,IAAU,QAAd,EAAwB;AACpBoC,2BAAWT,IAAX,CAAgBzD,IAAhB;AACH,aAFD,MAEO,IAAIoE,EAAEtC,IAAF,IAAU,MAAd,EAAsB;AACzB9B,qBAAKsE,GAAL,GAAWF,EAAEE,GAAb;AACAtE,qBAAKuE,aAAL,GAAqB,EAArB;AACAvE,qBAAKwE,IAAL,GAAY,GAAZ,EACIL,SAASV,IAAT,CAAczD,IAAd,CADJ;AAEH;AAEJ,SAvBD;;AAyBA,YAAIA,OAAO;AACP,oBAAQ,IADD;AAEP,wBAAY,QAFL;AAGP,oBAAQ;AACJ,8BAAckE,UADV;AAEJ,4BAAYC,QAFR;AAGJ,6BAAa,WAHT;AAIJ,kCAAkB;AACd,4BAAQ,CADM;AAEd,4BAAQ;AAFM;AAJd;AAHD,SAAX;;AAcA,aAAKlD,IAAL,CAAUjB,IAAV;AACH,K;;qBAEDiE,W,wBAAYlB,G,EAAK;;AAEb,YAAIC,QAAQ,aAAGC,WAAH,CAAeF,GAAf,EAAoB0B,GAApB,CAAwB,UAAU5C,IAAV,EAAgB;;AAEhD,gBAAI6C,OAAO,aAAGnB,QAAH,CAAYR,MAAMlB,IAAlB,CAAX;AACA,gBAAIC,OAAO,IAAX;;AAEA,gBAAI4C,KAAKlB,WAAL,EAAJ,EAAwB;AACpB1B,uBAAO,QAAP;AACH,aAFD,MAEO,IAAI4C,KAAK3D,MAAL,EAAJ,EAAmB;AACtBe,uBAAO,MAAP;AACH;;AAED,mBAAO;AACHK,sBAAMN,IADH;AAEHC,sBAAMA,IAFH;AAGH0C,sBAAME,KAAKF,IAHR;AAIHd,uBAAOgB,KAAKhB,KAAL,CAAWiB,OAAX,EAJJ;AAKHf,uBAAOc,KAAKd,KAAL,CAAWe,OAAX,EALJ;AAMHhB,uBAAOe,KAAKf,KAAL,CAAWgB,OAAX,EANJ;AAOHd,sBAAMa,KAAKb;AAPR,aAAP;AASH,SApBW,EAoBTe,MApBS,CAoBF,UAAU/C,IAAV,EAAgB;AACtB,gBAAIgD,QAAQhD,KAAKM,IAAL,CAAU2C,OAAV,CAAkB,GAAlB,CAAZ;AACA,gBAAIC,MAAMlD,KAAKmD,MAAf;AACA,gBAAIV,MAAM,EAAV;;AAEA,gBAAIO,QAAQ,CAAZ,EAAe;AACXP,sBAAMzC,KAAKM,IAAL,CAAU8C,SAAV,CAAoBJ,QAAQ,CAA5B,EAA+BE,GAA/B,CAAN;AACH;;AAEDlD,iBAAKyC,GAAL,GAAWA,GAAX;AACA,mBAAO,IAAP;AACH,SA/BW,CAAZ;;AAiCA,eAAOtB,KAAP;AACH,K;;qBAEDkC,c,2BAAerD,I,EAAM;AACjB,YAAIsD,SAAS,aAAGC,YAAH,CAAgBvD,IAAhB,CAAb;;AAEA,eAAOsD,MAAP;AACH,K",
    "file": "..\\..\\..\\src\\home\\controller\\explorer.js",
    "sourcesContent": [
        "'use strict';\n\nimport Base from './base.js';\nimport fs from 'fs';\nimport child_process from 'child_process';\nimport path from 'path';\n\nexport default class extends Base {\n\n    indexAction() {\n        this.assign({\n            path:process.cwd().replace(/\\\\/g,'/')+'/'\n        });\n\n        return this.display();\n    }\n\n    openAction(self) {\n        const socket = self.http.socket;\n        this.broadcast(\"new message\", \"connected\");\n    }\n\n    launcherAction(self) {\n        const exec = child_process.exec;\n        const {cmd} = self.http.data;\n\n        if(think.isEmpty(cmd)) {\n            return;\n        }\n        console.log(cmd);\n\n        const stbui = exec(cmd);\n        stbui.stdout.setEncoding('UTF-8');\n        stbui.stdout.on('data', (data) => {\n            this.emit('launcher', data);\n        });\n\n        stbui.stderr.setEncoding('UTF-8');\n        stbui.stderr.on('data', (data) => {\n            this.emit('launcher', data);\n        });\n\n        stbui.on('close', () => {\n            // this.emit('launcher', '');\n            // this.emit('launcher', 'bright: complete');\n        });\n\n    }\n\n    closeAction(self) {\n        this.broadcast(\"new message\", \"disconnected\");\n    }\n\n    // 新建文件\n    mkfileAction() {\n        let path = this.get('path');\n        path = decodeURIComponent(path);\n\n        if (!think.isFile(path)) {\n            fs.writeFileSync(path, '');\n        }\n\n        this.json({\"code\": true, \"use_time\": 0, \"data\": \"\\u65b0\\u5efa\\u6210\\u529f\\uff01\"});\n    }\n\n    // 新建目录\n    mkdirAction() {\n        let path = this.get('path');\n        path = decodeURIComponent(path);\n\n        if (!think.isDir(path)) {\n            think.mkdir(path);\n        }\n\n        this.json({\"code\": true, \"use_time\": 0, \"data\": \"\\u65b0\\u5efa\\u6210\\u529f\\uff01\"});\n    }\n\n    pathrnameAction() {\n        let path = this.post('path');\n        let rname = this.post('rname_to');\n\n        // 修改目录\n        // think.chmod(file);\n\n        this.success();\n    }\n\n\n    /*\n     * 删除目录或文件\n     */\n    pathdeleteAction() {\n        let delFile = this.post('list');\n        delFile = JSON.parse(delFile);\n\n        let file = delFile[0].path;\n        file = decodeURIComponent(file);\n\n        if (delFile[0].type == 'folder') {\n            think.rmdir(file).then(() => {\n                this.success({}, 'success');\n            });\n\n            // fs.rmdirSync(file);\n        } else if (delFile[0].type == 'file') {\n\n            fs.unlinkSync(file);\n        }\n\n        this.json({\"code\": true, \"use_time\": 0, \"data\": \"删除成功\"});\n    }\n\n    filedownloadAction() {\n        let file = this.get('path');\n        file = decodeURIComponent(file);\n\n        let name = file.split('/').pop();\n\n        this.download(file, name);\n\n        this.success({\n            name: name,\n            path: file\n        });\n    }\n\n    historybackAction() {\n        this.success();\n    }\n\n    pathinfoAction() {\n        this.success();\n    }\n\n    pathcopyAction() {\n        this.success();\n    }\n\n    zipDdownloadAction() {\n        this.success();\n    }\n\n    zipAction() {\n        this.success();\n    }\n\n    searchAction() {\n        this.success();\n    }\n\n    treelistAction() {\n        let children = [];\n        let dir = process.cwd();\n        let files = fs.readdirSync(dir);\n\n        files.forEach(function (filename) {\n            let fullname = path.join(dir, filename);\n            let stats = fs.statSync(fullname);\n\n            if (stats.isDirectory()) {\n\n                children.push({\n                    name: filename,\n                    type: 'folder',\n                    atime: +stats.atime,\n                    ctime: +stats.ctime,\n                    mtime: +stats.mtime,\n                    path: process.cwd() + '\\\\',\n                    mode: 'drwx rwx rwx (0777) ',\n                    is_readable: 1,\n                    is_writeable: 1\n                });\n\n            }\n\n            // process.stdout.write(filename + '\\t' +\n            //   stats.size + '\\t' +\n            //   stats.mtime + '\\n'\n            // );\n\n        });\n\n\n        let data = {\n            \"code\": true,\n            \"use_time\": 0,\n            \"data\": [{\n                \"name\": \"收藏夹\",\n                \"iconSkin\": \"fav\",\n                \"menuType\": \"menuTreeFavRoot\",\n                \"open\": true,\n                \"children\": []\n            }, {\n                \"name\": \"我的项目\",\n                \"children\": children,\n                \"menuType\": \"menuTreeRoot\",\n                \"iconSkin\": \"my\",\n                \"open\": true,\n                \"this_path\": process.cwd(),\n                \"isParent\": true\n            }, {\n                \"name\": \"公共目录\",\n                \"children\": [],\n                \"menuType\": \"menuTreeRoot\",\n                \"iconSkin\": \"lib\",\n                \"open\": true,\n                \"this_path\": \"*public*\",\n                // \"this_path\": think.ROOT_PATH,\n                \"isParent\": false\n            }\n            ]\n        };\n\n\n        this.json(data);\n    }\n\n    pathlistAction() {\n        let path = this.get('path');\n        path = decodeURIComponent(decodeURIComponent(decodeURIComponent(path)));\n\n        let files = this.getAllFiles(path);\n\n        let folderlist = [],\n            fielList = [];\n\n        files.forEach(function (k, v) {\n\n            let data = {};\n\n            data.name = k.name;\n            data.type = k.type;\n            data.atime = k.atime;\n            data.ctime = k.ctime;\n            data.mtime = k.mtime;\n            data.path = path;\n            data.mode = 'drwx rwx rwx (0777) ';\n            data.is_readable = 1;\n            data.is_writeable = 1;\n\n            if (k.type == 'folder') {\n                folderlist.push(data);\n            } else if (k.type == 'file') {\n                data.ext = k.ext;\n                data.size_friendly = \"\";\n                data.size = '0',\n                    fielList.push(data);\n            }\n\n        });\n\n        let data = {\n            \"code\": true,\n            \"use_time\": 0.015625,\n            \"data\": {\n                \"folderlist\": folderlist,\n                \"filelist\": fielList,\n                \"path_type\": \"writeable\",\n                \"history_status\": {\n                    \"back\": 1,\n                    \"next\": 0\n                }\n            }\n        };\n\n        this.json(data);\n    }\n\n    getAllFiles(dir) {\n\n        let files = fs.readdirSync(dir).map(function (file) {\n\n            let stat = fs.statSync(dir + file);\n            let type = null;\n\n            if (stat.isDirectory()) {\n                type = 'folder';\n            } else if (stat.isFile()) {\n                type = 'file';\n            }\n\n            return {\n                name: file,\n                type: type,\n                size: stat.size,\n                atime: stat.atime.getTime(),\n                mtime: stat.mtime.getTime(),\n                ctime: stat.ctime.getTime(),\n                mode: stat.mode\n            }\n        }).filter(function (file) {\n            let start = file.name.indexOf('.');\n            let end = file.length;\n            let ext = '';\n\n            if (start > 0) {\n                ext = file.name.substring(start + 1, end);\n            }\n\n            file.ext = ext;\n            return true;\n        });\n\n        return files;\n    }\n\n    getFileContent(file) {\n        let buffer = fs.readFileSync(file);\n\n        return buffer;\n    }\n}"
    ]
}